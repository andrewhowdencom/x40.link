# https://taskfile.dev

version: '3'

env:
  # Disable calls to CGO, so that the binaries compiled are static.
  CGO_ENABLED: "0"

vars:
  GIT_REFSPEC:
    sh: "git rev-parse --short HEAD"

tasks:
  bin:
    desc: "Build a go binary specific to an architecture and operating system"
    deps:
      - "protobuf/generate"
    requires:
      vars: [GOOS, GOARCH]
    cmds:
      # Generate the required files
      - mkdir -p "dist/{{ .GOOS }}+{{ .GOARCH }}"
      - go build -o "dist/{{ .GOOS }}+{{ .GOARCH }}/x40.link{{ exeExt }}" main.go
      - go build -o "dist/{{ .GOOS }}+{{ .GOARCH }}/@{{ exeExt }}" cli/main.go 

  bin/all:
    desc: "Builds the go binaries"
    deps:
      - "bin/clean"
    summary: |
      Builds the go binaries

      Generates go binaries for all supported operating systems, and stores them under "dist/"
      with the appropriate suffix.
    cmds:
      - for:
        # Linux (both Intel and ARM)
        - GOOS: "linux"
          GOARCH: "amd64"
        - GOOS: "linux"
          GOARCH: "arm64"

        # Raspberry Pi
        - GOOS: "linux"
          GOARCH: "arm"

        # MacOS (Older Intel & Newer ARM)
        - GOOS: "darwin"
          GOARCH: "amd64"
        - GOOS: "darwin"
          GOARCH: "arm64"

        # Windows
        - GOOS: "windows"
          GOARCH: "amd64"
        - GOOS: "windows"
          GOARCH: "arm64"

        task: bin
        vars:
          GOOS: "{{ .ITEM.GOOS }}"
          GOARCH: "{{ .ITEM.GOARCH }}"

  bin/clean:
    desc: "Clean the generated artifacts"
    cmds:
      - "rm -rf dist"

  cloudrun/apply:
    desc: "Deploy the latest state to CloudRun"
    cmds:
      - cat deploy/prod/cr/service.yaml | envsubst | gcloud run services replace -
    env:
      VERSION: "{{ .GIT_REFSPEC }}"

  container/all:
    desc: "Build and push containers to all registries"
    cmds:
      - for:
        - REGISTRY: "europe-west3-docker.pkg.dev/andrewhowdencom/x40-link"
        - REGISTRY: "ghcr.io/andrewhowdencom"
        task: "container"
        vars:
          REGISTRY: "{{ .ITEM.REGISTRY }}"

  container:
    desc: "Build and push a container to a registry"
    cmds:
      - task: "container/build"
        vars: { "REGISTRY": "{{ .REGISTRY }}"}
      - task: "container/push"
        vars: { "REGISTRY": "{{ .REGISTRY }}"}

  container/build:
    desc: "Build the container for the application"
    cmds:
      - |
        podman build \
          --format docker \
          --build-arg VERSION="{{ .GIT_REFSPEC }}" \
          --build-arg CREATED='{{now | date "2006-01-02T15:04:05Z07:00"}}' \
          --tag {{ .REGISTRY | default "localhost" }}/x40.link:{{ .GIT_REFSPEC }} \
          .

  container/push:
    desc: "Push the container"
    requires:
      vars: ["REGISTRY"]
    cmds:
      - |
        podman push \
          --remove-signatures \
          {{ .REGISTRY }}/x40.link:{{ .GIT_REFSPEC }}

  docs:
    desc: "Build the static HTML for the documentation"
    summary: |
      Generate the static HTML for the documentation

      This documentation will then be deployed to x40.app (or similar) so that it can be viewed by people looking
      to reproduce the service.
    dir: "./docs"
    deps: ["docs/clean", "docs/install"]
    cmds:
      - "poetry run mkdocs build"

  docs/clean:
    desc: "Clean the generated documentation"
    dir: "./docs"
    cmds:
      - "rm -rf docs/content"

  docs/install:
    desc: "Install the dependencies required for the documentation"
    dir: "./docs"
    cmds:
      - "poetry install --no-root"

  docs/tar:
    desc: "Package the documentation for release"
    deps: ["docs"]
    cmds:
      - mkdir -p dist
      - |
        tar \
            --dereference --hard-dereference \
            --directory docs/site/ \
            -cvf dist/docs.tar.gz \
            .

  docs/view:
    desc: "View the documentation on the local machine"
    dir: "./docs"
    cmds:
      - "poetry run mkdocs serve"

  protobuf/generate:
    desc: "Generates the code required to interact with protobuf definitions"
    cmds:
      - cd api && buf generate


  tofu/plan:
    desc: "Plan the infrastructure changes, and validate their output"
    requires:
      vars: [ENV]
    dir: "deploy/{{ .ENV }}/tf"
    cmds:
      - "tofu plan -out next.planfile"

  tofu/apply:
    requires:
      vars: [ENV]
    desc: "Apply previously designed infrastructure changes"
    dir: "deploy/{{ .ENV }}/tf"
    cmds:
      - "tofu apply next.planfile"

  lint:
    desc: "Validate the code against common standards"
    cmds:
      # Containers
      - hadolint Containerfile

      # Golang
      - golangci-lint run ./...

  test:
    env:
      CGO_ENABLED: 1
    desc: "Run the default set of unit tests"
    cmds:
      - go test ./... -test.v -race -vet=all

  tools/apt/install:
    desc: "Install a series of tools via aptitude"
    cmds:
      # Required for unit tests
      - apt-get update
      - apt-get install google-cloud-sdk-firestore-emulator

  tools/go/install:
    desc: "Installs a series of go tools"
    cmds:
      - go install "github.com/bufbuild/buf/cmd/buf@v1.56.0"
      - go install "google.golang.org/grpc/cmd/protoc-gen-go-grpc"
      - go install "google.golang.org/protobuf/cmd/protoc-gen-go"